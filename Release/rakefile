#!/usr/bin/env ruby -S rake --verbose --trace --rakefile
# -*- encoding: utf-8 -*-

# To build Growl, follow this example:
# VERSION=SOMETHING CONFIGURATION=Localization rake build:growl
#
# The configuration is specified, along with the target to build. Rake does the building.
# Change the version number before building.


# it'd be fairly abnormal to install rake without RubyGems... but you never know, do you?
require 'rubygems' unless defined?(Gem)
require File.expand_path('../scripts/resign-binaries.rb')
require File.expand_path('../scripts/validate-code-signatures.rb')

def env_default(name, fallback=nil)
  value = ENV[name.to_s]
  return value.strip if value and not value.to_s.empty?

  if block_given?
    value = yield
    return value.strip if value and not value.to_s.empty?
  end

  fallback
end


$release_dir  = File.expand_path '..', __FILE__
$src_root     = File.expand_path '..', $release_dir

$version_define_regex = 
    /^\#\s*define\s+GROWL_VERSION\s+((\d+)\.(\d+)\.(\d+))\s*$/

$last_growlversion_metadata = File.
    read("#{$src_root}/GrowlVersion.h").
    match($version_define_regex) || []

$growl_version = env_default(:VERSION, '2.1a1') { $last_growlversion_metadata[1] }
$toolchain     = env_default(:TOOLCHAIN, '/Developer') { `xcode-select -print-path 2>/dev/null` }
$configuration = env_default(:CONFIGURATION, 'Release')
$xcodebuild    = env_default(:XCODEBUILD, "#{$toolchain}/usr/bin/xcodebuild") { `xcrun -find xcodebuild` }
$package_maker = env_default(:PACKAGE_MAKER, "#{$toolchain}/usr/bin/packagemaker") do
  pmapp = `mdfind -onlyin /Applications "kMDItemDisplayName=='PackageMaker*' && kMDItemKind=='Application'" 2>/dev/null | head -n1`.strip
  if pmapp and not pmapp.to_s.empty?
    "#{pmapp}/Contents/MacOS/PackageMaker"
  else
    `xcrun -find packagemaker`
  end
end
$destdir       = env_default(:DESTDIR, File.join($release_dir, 'distribution'))
$build_root    = File.join($destdir, "build")
$product_root  = File.join($destdir, "product")
$csi           = env_default(:CODE_SIGN_IDENTITY, "3rd Party Mac Developer Application: The Growl Project, LLC")
$csi_installer = $csi.gsub("Application", "Installer")
$csi_sdk       = env_default(:CODE_SIGN_IDENTITY_SDK, "Developer ID Application: The Growl Project, LLC")
$beta          = false

task :default => "package_everything"

desc "package everything"
task :package_everything => [:setup, "package:growlnotify", "package:hardwaregrowler", "package:growltunes", "package:growl", "package:sdk", "package:growltunes"] do
  puts "Done Packaging"
end

desc "package growl"
task :package_growl => [:setup, "package:growl"] do
end

desc "package sdk"
task :package_sdk => [:setup, "package:sdk"] do
end

desc "package growlnotify"
task :package_growlnotify => [:setup, "package:growlnotify"] do
end

desc "package hardware growler"
task :package_hardwaregrowler => [:setup, "package:hardwaregrowler"] do
end

desc "package growlcal"
task :package_growlcal => [:setup, "package:growlcal"] do
end

desc "package capster"
task :package_capster => [:setup, "package:capster"] do
end

desc "package growltunes"
task :package_growltunes => [:setup, "package:growltunes"] do
end

desc "basic setup: version header, beta, configuration, cleanup, product root"
task :setup do
  File.open("#{$src_root}/GrowlVersion.h", 'w+') do |io|
    tmpl = File.read("#{$src_root}/GrowlVersion.h.tmpl")
    tmpl.gsub!(/INSERT_VERSION_HERE/, $growl_version)
    io.write(tmpl)
  end

  $beta = ["Beta", "Localization"].include?($configuration)
  $configuration = "Localization" if $beta

  FileUtils.rm_rf($destdir)
  FileUtils.mkdir_p($product_root)
end

# you shouldn't need to call any of the following tasks directly
namespace "build" do

  desc "build growlnotify"
  task :growlnotify do
    system "#{$xcodebuild} -project #{$src_root}/Extras/growlnotify/growlnotify.xcodeproj -configuration #{$configuration} SYMROOT=#{$build_root}/growlnotify"
    system "codesign --preserve-metadata -f -s \"Developer ID Application: The Growl Project, LLC\" -v #{$build_root}/growlnotify/#{$configuration}/growlnotify"
  end

  desc "build growl"
  task :growl do
    system "#{$xcodebuild} -project #{$src_root}/Growl.xcodeproj -target Growl.app -configuration #{$configuration} SYMROOT=#{$build_root}/growl"
  end

  desc "build hardware growler"
  task :hardwaregrowler do
    system "#{$xcodebuild} -project #{$src_root}/Extras/HardwareGrowler/HardwareGrowler.xcodeproj -configuration #{$configuration} SYMROOT=#{$build_root}/hardwaregrowler"
  end

  desc "build growlcal"
  task :growlcal do
    system "#{$xcodebuild} -project #{$src_root}/Extras/GrowlCal/GrowlCal.xcodeproj -configuration #{$configuration} SYMROOT=#{$build_root}/growlcal"
  end

  desc "build capster"
  task :capster do
    system "#{$xcodebuild} -project #{$src_root}/Extras/Capster/Capster.xcodeproj -configuration #{$configuration} SYMROOT=#{$build_root}/capster"
  end

  desc "build growltunes"
  task :growltunes do
    system "#{$xcodebuild} -target GrowlTunes -project #{$src_root}/Extras/GrowlTunes/GrowlTunes.xcodeproj -configuration #{$configuration} SYMROOT=#{$build_root}/growltunes"
  end

  desc "build beephammer"
  task :beephammer do
    system "#{$xcodebuild} -project \"#{$src_root}/Developer Tools/BeepHammer/BeepHammer.xcodeproj\" -configuration #{$configuration} SYMROOT=#{$build_root}/beephammer"
  end

  desc "build multigrowl"
  task :multigrowl do
    system "#{$xcodebuild} -project \"#{$src_root}/Developer Tools/MultiGrowl/MultiGrowl.xcodeproj\" -configuration #{$configuration} SYMROOT=#{$build_root}/multigrowl"
  end

  desc "build framework"
  task :framework do
    system "#{$xcodebuild} -project #{$src_root}/Growl.xcodeproj -target Growl.framework -configuration #{$configuration} SYMROOT=#{$build_root}/framework"
  end
  
  desc "build plugin framework"
  task :pluginFramework do
    system "#{$xcodebuild} -project #{$src_root}/Growl.xcodeproj -target GrowlPlugins -configuration #{$configuration} SYMROOT=#{$build_root}/pluginframework"
  end
  
  desc "build gntp client xpc"
  task :gntpclientxpc do
    system "#{$xcodebuild} -project #{$src_root}/Growl.xcodeproj -target GNTPClientService -configuration #{$configuration} SYMROOT=#{$build_root}/gntpclientxpc"
  end
end

namespace "package" do

  desc "package growlnotify"
  task :growlnotify => ["build:growlnotify"] do
    curdir = FileUtils.pwd()
    FileUtils.cd("#{$build_root}/growlnotify/#{$configuration}")
    # package up growlnotify
    system "#{$package_maker} --no-relocate --doc #{$src_root}/Release/growlnotify/growlnotify.pmdoc --out #{$build_root}/growlnotify/#{$configuration}/GrowlNotify.pkg --version #{$growl_version} --id info.growl.growlnotify.growlnotify.pkg -v"
    system "codesign --preserve-metadata -f -s \"Developer ID Application: The Growl Project, LLC\" -v #{$build_root}/growlnotify/#{$configuration}/GrowlNotify.pkg"
    system "zip -r GrowlNotify-#{$growl_version}.zip GrowlNotify.pkg"
    system "cp -Rp GrowlNotify-#{$growl_version}.zip #{$product_root}"
    system "zip -r #{$product_root}/growlnotify-#{$growl_version}-dSYM.zip growlnotify.dSYM"
    FileUtils.cd(curdir)
  end

  desc "package growl"
  task :growl => ["build:growl"] do
    curdir   = FileUtils.pwd()
    absolute = File.expand_path("#{$product_root}")
    FileUtils.mkdir_p(absolute)
	failure = resign(File.expand_path("#{$build_root}/growl/#{$configuration}/Growl.app"), $csi)
	if not failure
		failure = validate(File.expand_path("#{$build_root}/growl/#{$configuration}/Growl.app"), $csi)
		exit(failure) if failure
	end
    FileUtils.cd("#{$build_root}/growl/#{$configuration}")
    if !$beta
      system "productbuild --component Growl.app /Applications --sign \"#{$csi_installer}\" Growl.pkg && cp -Rp Growl.pkg #{absolute}/"
    else
      system "zip -r #{absolute}/Growl-#{$growl_version}.zip Growl.app/"
    end
    system "zip -r #{absolute}/Growl-#{$growl_version}-dSYM.zip *.dSYM"
    FileUtils.cd(curdir)

  end

  desc "package hardware growler"
  task :hardwaregrowler => ["build:hardwaregrowler"] do
    curdir = FileUtils.pwd()
    absolute = File.expand_path("#{$product_root}")
    FileUtils.mkdir_p(absolute)
	failure = resign(File.expand_path("#{$build_root}/hardwaregrowler/#{$configuration}/HardwareGrowler.app"), $csi)
	if not failure
		failure = validate(File.expand_path("#{$build_root}/hardwaregrowler/#{$configuration}/HardwareGrowler.app"), $csi)
		exit(failure) if failure
	end
    FileUtils.cd("#{$build_root}/hardwaregrowler/#{$configuration}")
    if !$beta
      system "productbuild --component HardwareGrowler.app /Applications --sign \"#{$csi_installer}\" HardwareGrowler.pkg && cp -Rp HardwareGrowler.pkg #{$product_root}"
    else
      system "zip -r -y #{$product_root}/HardwareGrowler-#{$growl_version}.zip HardwareGrowler.app/"
    end
    system "zip -r #{absolute}/HardwareGrowler-#{$growl_version}-dSYM.zip *.dSYM"
    FileUtils.cd(curdir)
  end
  
  desc "package growlcal"
  task :growlcal => ["build:growlcal"] do
    curdir = FileUtils.pwd()
    FileUtils.cd("#{$build_root}/growlcal/#{$configuration}")
    if !$beta
      system "productbuild --component GrowlCal.app /Applications --sign \"#{$csi_installer}\" GrowlCal.pkg && cp -Rp GrowlCal.pkg #{$product_root}"
    else
      system "zip -r -y #{$product_root}/GrowlCal-#{$growl_version}.zip GrowlCal.app/"
    end
    system "zip -r #{$product_root}/GrowlCal-#{$growl_version}-dSYM.zip GrowlCal.dSYM"
    FileUtils.cd(curdir)
  end

  desc "package capster"
  task :capster => ["build:capster"] do
    curdir = FileUtils.pwd()
    FileUtils.cd("#{$build_root}/capster/#{$configuration}")
    if !$beta
      system "productbuild --component Capster.app /Applications --sign \"#{$csi_installer}\" Capster.pkg && cp -Rp Capster.pkg #{$product_root}"
    else
      system "zip -r -y #{$product_root}/Capster-#{$growl_version}.zip Capster.app/"
    end
    system "zip -r #{$product_root}/Capster-#{$growl_version}-dSYM.zip Capster.dSYM"
    FileUtils.cd(curdir)
  end

  desc "package growltunes"
  task :growltunes => ["build:growltunes"] do
    curdir = FileUtils.pwd()
    absolute = File.expand_path("#{$product_root}")
    FileUtils.mkdir_p(absolute)
	failure = resign(File.expand_path("#{$build_root}/growltunes/#{$configuration}/GrowlTunes.app"), $csi)
	if not failure
		failure = validate(File.expand_path("#{$build_root}/growltunes/#{$configuration}/GrowlTunes.app"), $csi)
		exit(failure) if failure
	end
	
    FileUtils.cd("#{$build_root}/growltunes/#{$configuration}")
    if !$beta
      system "productbuild --component GrowlTunes.app /Applications --sign \"#{$csi_installer}\" GrowlTunes.pkg && cp -Rp GrowlTunes.pkg #{$product_root}"
    else
      system "zip -r -y #{$product_root}/GrowlTunes-#{$growl_version}.zip GrowlTunes.app/"
    end
    system "zip -r #{absolute}/GrowlTunes-#{$growl_version}-dSYM.zip *.dSYM"
    FileUtils.cd(curdir)
  end

  desc "package sdk"
  task :sdk => ["build:beephammer", "build:framework", "build:gntpclientxpc", "build:pluginFramework"] do
    FileUtils.mkdir_p("#{$destdir}/Growl-#{$growl_version}-SDK")
    FileUtils.cd("#{$destdir}/Growl-#{$growl_version}-SDK")
    FileUtils.mkdir_p("Developer Tools")
    FileUtils.mkdir_p("Framework")
    FileUtils.mkdir_p("Framework/Legacy")
    FileUtils.mkdir_p("Bindings")
    FileUtils.mkdir_p("XPC Client")
    FileUtils.mkdir_p("Plugin Development")

    # copy over the Applescript samples
    FileUtils.cp("#{$src_root}/Bindings/applescript/Test Growl AppleScript.scpt", "Bindings")
    FileUtils.cp("#{$src_root}/Bindings/applescript/Test GrowlControl AppleScript.scpt", "Bindings")

    # copy over the framework
    FileUtils.cp_r("#{$build_root}/framework/#{$configuration}/Growl.framework", "Framework", :remove_destination => true)

    # copy over the 1.2.2 framework
    FileUtils.cp_r("#{$src_root}/legacy/Growl.framework", "Framework/Legacy")

    # copy over developer tools
    FileUtils.cp_r("#{$build_root}/beephammer/#{$configuration}/BeepHammer.app", "Developer Tools")
    FileUtils.cp_r("#{$src_root}/Developer Tools/MultiGrowl", "Developer Tools")
    FileUtils.mkdir_p("Developer Tools/MultiGrowl/external/")
    FileUtils.mkdir_p("Developer Tools/MultiGrowl/external/legacy/")
    FileUtils.ln_s("../../../Framework/Growl.framework", "Developer Tools/MultiGrowl/external/Growl.framework")
    FileUtils.ln_s("../../../../Framework/legacy/Growl.framework", "Developer Tools/MultiGrowl/external/legacy/Growl.framework")

    #copy over the SDK readme
    FileUtils.cp_r("#{$src_root}/Developer Tools/Growl SDK Readme.rtf", "#{$destdir}/Growl-#{$growl_version}-SDK")

    # copy over XPC and its script
    FileUtils.cp_r("#{$build_root}/gntpclientxpc/#{$configuration}/com.company.application.GNTPClientService.xpc", "XPC Client")
    FileUtils.cp("#{$src_root}/scripts/xpc-rename-move.rb", "XPC Client")

    #copy over our plugin SDK, the plugin framwork and the growlView.xctemplate
	 FileUtils.cp("#{$src_root}/Developer Tools/GrowlView XCode Template Readme.txt", "Plugin Development")
    FileUtils.cp_r("#{$src_root}/Developer Tools/GrowlView.xctemplate", "Plugin Development", :remove_destination => true)
    FileUtils.cp_r("#{$build_root}/pluginframework/#{$configuration}/GrowlPlugins.framework", "Plugin Development", :remove_destination => true)
    FileUtils.ln_s("../GrowlPlugins.framework", "Plugin Development/GrowlView.xctemplate/GrowlPlugins.framework")

    #codesign the sdk

    #resign(File.expand_path("#{$destdir}/Growl-#{$growl_version}-SDK/Developer\ Tools/BeepHammer.app/"), $sdk_csi)

    
    FileUtils.cd("..")
    system "zip -r -y #{$product_root}/Growl-#{$growl_version}-SDK.zip Growl-#{$growl_version}-SDK/"

  end
end




